// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  bio         String?
  avatar      String?
  isAdmin     Boolean   @default(false)
  
  // Relações
  shelves     Shelf[]
  favorites   Favorite[]
  reviews     Review[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("users")
}

model Book {
  id          Int       @id @default(autoincrement())
  title       String
  author      String
  description String?
  coverImage  String?
  publishYear Int
  genre       String
  tags        String    // Armazenado como JSON string
  isbn        String?   @unique
  
  // Relações
  shelves     ShelfBook[]
  favorites   Favorite[]
  reviews     Review[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("books")
}

model Shelf {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  
  // Relações
  userId      Int
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  books       ShelfBook[]
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("shelves")
}

model ShelfBook {
  id          Int      @id @default(autoincrement())
  
  // Relações
  shelfId     Int
  shelf       Shelf    @relation(fields: [shelfId], references: [id], onDelete: Cascade)
  bookId      Int
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  addedAt     DateTime @default(now())

  @@map("shelf_books")
  @@unique([shelfId, bookId])
}

model Favorite {
  id          Int      @id @default(autoincrement())
  
  // Relações
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId      Int
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())

  @@map("favorites")
  @@unique([userId, bookId])
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Int      // 1-5
  comment     String?
  
  // Relações
  userId      Int
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookId      Int
  book        Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reviews")
  @@unique([userId, bookId])
}
